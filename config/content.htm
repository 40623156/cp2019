<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>程式</h1>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">import 'dart:html';

void main() {
  // 每一組 10 人
  int num = 10;
  // 組序由 1 開始
  int gth = 1;
  // 迴圈序號變數
  int i;
  // 每組學員暫存數列
  var gp_list = [];
  // 全班分組數列
  var cp2019 = [];

  HttpRequest.getString(
          'https://mde.tw/cp2019/downloads/2019fall_cp_1a_list.txt')
      .then((String resp) {
    // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \n 轉為數列
    var stud_list = resp.trim().split("\n");
    // 數列利用 shuffle() 方法以隨機方法弄亂順序
    stud_list.shuffle();
    // 逐一讀取已經弄亂的學生學號數列, 利用模數運算每幾人分成一組
    for (i = 0; i &lt; stud_list.length; i++) {
      // 0, 1~(num-1), num
      if (i % num == 0) {
        gp_list = [];
        // 列印區隔符號
        print('=' * 20);
        print("group $gth :");
        print(stud_list[i]);
        // 在各分組數列中加入將對應的學員學號
        gp_list.add(stud_list[i]);
        gth = gth + 1;
      } else {
        print(stud_list[i]);
        // 在各分組數列中加入將對應的學員學號
        gp_list.add(stud_list[i]);
      }
      if (i % num == 0) {
        // 逐步將各組暫存的分組數列加入全班分組數列中
        cp2019.add(gp_list);
      }
    }
    // 對各組學號排序
    cp2019.forEach((element){element.sort();});
    // 列出分組且排序後數列
    print(cp2019);
  });
}
</pre>
<p><br/><br/></p>
<p></p>